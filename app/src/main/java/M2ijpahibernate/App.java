/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package M2ijpahibernate;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.util.Iterator;
import java.util.List;


import org.hibernate.Session;
import org.hibernate.Transaction;


import M2ijpahibernate.DB.SessionManager;
import M2ijpahibernate.Entity.Actor;
import M2ijpahibernate.Entity.Film;
import M2ijpahibernate.Entity.FilmActor;
import M2ijpahibernate.Entity.Language;
import M2ijpahibernate.ExerciceSql.Serie1;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Root;




public class App {
    public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    public static void main(String[] args) throws IOException {
        Serie1.Exercice3();
    }



    public static void testFactor() {
        Session session = SessionManager.openSession();
        Actor a1 = session.getReference(Actor.class, 3);
        for (FilmActor Actors : a1.getfActors()) {
            System.out.println(Actors.getActor().getFirstName() + " " + Actors.getActor().getLastName() + " :\n"+
            "Titre : " + Actors.getFilma().getTitle() + "\n"+
            "Description: " + Actors.getFilma().getDescription()+"\n");
        }
        session.close();
    }

    public static void filmParLanguage() throws IOException {
        Session session = SessionManager.openSession();
        Language l = session.getReference(Language.class, 1);
        Iterator<Film> films = l.getFilms().iterator();
        System.out.println("Langue : " + l.getName());
        
        System.out.println("Film associés a cette langue :");
        while(films.hasNext()){
            System.out.println("Titre : " + films.next().getTitle());
            System.out.println("Description : " + films.next().getDescription());
        }
        session.close();
    }

    public static void addActorOnFilm() {
        Session session = SessionManager.openSession();
        Actor a1 = session.getReference(Actor.class, 90);
        Film f1 = session.getReference(Film.class, 3);
        FilmActor fa = new FilmActor();
        fa.setActor(a1);
        fa.setFilm(f1);
        Transaction tx = session.beginTransaction();
        session.persist(fa);
        tx.commit();

        session.close();
    }

    public static void getActorByFirstName(){
        
        Session session =  SessionManager.openSession();

        TypedQuery<Actor> myQuery = session.createNamedQuery("Actor.findByFirstName", Actor.class);

        myQuery.setParameter("firstName", "NICK");

        List<Actor> actors = myQuery.getResultList();

        System.out.println(actors.size());
    }

    public static void getFilmStartN(){
        Session session = SessionManager.openSession();
        TypedQuery<Film> query = session.createNamedQuery("Film.startFromLetter", Film.class);

        query.setParameter("letter", "N%");

        List<Film> films = query.getResultList();

        for (Film film : films) {
            System.out.println(film.getTitle());
        }
    }

    public static void getFilmWithTwoHourLength() {
        Session session = SessionManager.openSession();
        TypedQuery<Film> query = session.createNamedQuery("Film.FromHour", Film.class);

        query.setParameter("min", 120);

        List<Film> films = query.getResultList();

        for (Film film : films) {
            System.out.println(
                "Film : " + film.getTitle()+ "\n" +
                "Durée : " + (film.getLength() / 60)+ "h\n"
            );
        }
    }
    public static void getFilmAndLanguageReplacementCost(int rep) {
        Session session = SessionManager.openSession();
        TypedQuery<Object[]> query = session.createNamedQuery("Film.remplacementCost", Object[].class);

        query.setParameter("remplacementCost", 10);

        List<Object[]> result = query.getResultList();
        
            for (int j = 0; j < result.get(rep).length; j++) {
                
                System.out.println(result.get(rep)[j]);
            }
        
        System.out.println(result.size());
        
        


        
    }

    public static void getActorByFirstNameCriteria() {
        Session session = SessionManager.openSession();

        // Récupération du builder
        CriteriaBuilder builder = session.getCriteriaBuilder();
        // Préparation
        CriteriaQuery<Actor> criteria = builder.createQuery(Actor.class);
        // Selection de l'objet Root
        Root<Actor> root = criteria.from(Actor.class);

        // Création de la requête
        criteria.select(root);
        criteria.where(builder.equal(root.get("FirstName"), "NICK"));

        List<Actor> actors = session.createQuery(criteria).getResultList();

        System.out.println(actors.size());
    }

    public static void getFilm2006() {
        Session session = SessionManager.openSession();

        CriteriaBuilder builder = session.getCriteriaBuilder();
        CriteriaQuery<Film> criteria = builder.createQuery(Film.class);
        Root<Film> root = criteria.from(Film.class);
        criteria.select(root);
        criteria.where(builder.equal(root.get("releaseYear"), "2006"));

        List<Film> films = session.createQuery(criteria).getResultList();

        System.out.println(films.size());
    }

    public static void getActorCriteria() {
        Session session = SessionManager.openSession();

        CriteriaBuilder builder = session.getCriteriaBuilder();
        CriteriaQuery<Actor> criteria = builder.createQuery(Actor.class);
        Root<Actor> root = criteria.from(Actor.class);
        criteria.select(root);

        List<Actor> actors = session.createQuery(criteria).getResultList();

        System.out.println(actors.size());


    }
}
